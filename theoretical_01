1) What is Set interface
*Set is a collection of elements which cannot contain duplicate elements.

2) What is true about final class
*Class declared final is a final class
*It can not be inherited.

3) Suppose you want to create a custom thread class by extending  java.lang.Thread in order to provide some special functionality. Which of the following must you do?
*Override run() method

4) Какой паттерн следует применять, когда для обеспечения всех возможных комбинаций методов (функциональности объекта класса) простое наследование не подходит в связи с появлением большого количества классов?
*Паттерн декоратор

5)	Consider the following code:
import java.util.*;
public class Test{
public static void main(String[] args) {
List<Float> list = new LinkedList<>();
list.add(1.0);
list.add(2.0);
list.add(3.0);
System.out.printf("Size: %d", list.size()); } }
What is the result of compiling and running this code?
*the code does not compile

6) Какие есть способы перебора элементов коллекций, которые являются имплементациями (реализациями) поведения списков?
*For 
*While
*foreach
*Iterator

7) What is the result from compiling and running the following code?
import java.util.*;
class Student{
private int mark;
public Student(int mark) { this.mark = mark; }
public int hashCode() {
System.out.println(mark + "");
return 10;
} }
public class Test {
public static void main(String[] args) {
Set<Student> set = new HashSet<>();
set.add(new Student(7));
set.add(new Student(9));
set.add(new Student(10));
System.out.println(set.size());
} }
* Выводы из конструктора и "3"

8) What is the different between Size and Capacity of java collections?
*Size - элементов в коллекции в момент времени, capacity - сколько памяти выделено под элементы в момент времени (максимальное количество элементов в момент времени, при его превышении - существует механизм увеличения емкости)

9) What results from running the following code?
public class Test implements Runnable {
public void run() {
System.out.println("Hello students :)");
Thread.currentThread().sleep(100);
}
public static void main(String[] args)
throws InterruptedException{
new Thread(new Test()).start();
} }
*Compiler error

10) Which is the way in which a thread can enter the waiting state?
*Invoke object's wait method.

11)	Deletion is faster in LinkedList than ArrayList. (True or False?)
*True

12)	What is the main different between Decorator and Strategy Patterns?
*Стратегия - характеризует полноту поведения класса, по сути реализует набор поведений как для одного так и для нескольких классов. Декоратор обеспечивает многообразие комбинаций поведения, когда наследование не подходит в связи с огромным количеством классов, кроме того не может существовать без основного класса  

13) What will be the result of compiling and running this code?
public class Test {
public void method(String... msgs, int a, int b){
System.out.println(
msgs[msgs.length-1] + ": " + (a + b));
}
public static void main(String[] args) {
new Test().method("hello",1,2);
new Test().method("hi", "students",1,2);
*a compiler error

14) What is the main different between java collections and java arrays?
Java array - обычный массив (выделенная область памяти - элементы расположены друг за другом, по индексу расчитывается место нахождения элемента) с присущей ему базовой функциональностью (доп функциональность частично реализована через утилитный класс Arrays).
Java collection - контейнер с дополнительной функциональностью, реализует интерфейс Collection. Кроме того определенные типы коллекций реализуют не только хранение одиночных элементов, но и хранение в связке ключ - значение или упорядоченных значений.

15)	Каких методов не хватает в декларированииинтерфейса базового поведения коллекций?
interface Collection implements Iterable {
boolean contains(Object o);
boolean containsAll(Collection<?> c);
boolean remove(Object o);
boolean removeAll(Collection<?> c);
boolean retainAll(Collection<?> c);
Object[] toArray();
<T> T[] toArray(T[] a);
boolean equals(Object o);
int hashCode();
}
*boolean add(E e)
*boolean addAll(collection<? extends E> c)
*void clear()
*boolean isEmpty()
*Iterator <E> iterator()
*size()

16)	Which of the following may be synchronized?
* Blocks within methods
* Static methods
* Blocks within static methods
* Dynamic methods

17)	What results from running the following code?
import java.util.*;
public class Test {
public static void main(String[] args) {
List<Integer> list = new ArrayList<>();
list.add(1); list.add(2); list.add(3);
for (Integer integer : list) {
list.add(4);
System.out.print(integer + " ");
} } }
*a compiler error

18)	Consider the following Shape class:
abstract class Shape{
private int x, y;
public Shape(int x, int y) { this.x = x; this.y = y; }
public abstract void draw();
}
Which two classes use the Shape class correctly?
*abstract class Circle extends Shape {
private int radius; }
□ class Circle extends Shape {
private int radius;
public void draw() { /* some code here */} }

19)	Какие основные методы задекларированы в интерфейсе Iterator?
*a)	default void forEachRemaining (Consumer <? super E> action) 
*b)	boolean hasNext()
*c)	E next()
*d)	default void remove()

20)	What is TreeSet Interface?
*It is a Set implemented when we want elements in a tree based order.
*It is a Set implemented when we want elements in a sorted order.
*It is a Set implemented when we want elements in a binary tree format.

21)	Which statement is true about the classes and interfaces in the following code?
interface I { void some(String s); }
class A implements I {
public void some(String s) {/*some code here*/} //6
}
class B {
I method1() {/*some code here*/}
String method2() {/*some code here*/}
}
class C extends B {
A method1() {/*some code here*/} //15
Object method2() {/*some code here*/} //16
}
*Compilation of class C will fail because of an error in line 16.

22)	What is the different between old (since JDK1.0) containers (BitSet, Dictionary, Tashtable, Properties, Vector, Stack, etc.) and new containers (ArrayList, LinkedList, HashMap, TreeMap, PriorityQueue, etc.)?
*Старые контейнеры потокобезопасны, новые нет (но для них существуют специальные классы обертки обеспечивающие данную функциональность)

23)	What is the result from compiling and running the following code?
class Human {
String name = "no name";
public Human(String name) { this.name = name; }
}
class Student extends Human{
String id = "0000";
public Student(String id) { this.id = id; }
}
class Test {
public static void main(String[] args) {
Student s = new Student("1234");
System.out.println(s.id);
} }
*the code does not compile

24)	A Java monitor either extend Thread or implements Runnable. (True or False?)
*False

25)	Which of the following is a marker interface?
*Serializable

26)	Which code, inserted into the Student class, allows it to compile?
class University {
public enum Ability {
INTELLIGENT, STRENGTH, AGILITY
} }
class Student { /* insert code here */ }
*University.Ability ability =University.Ability.INTELLIGENT;

27)	What happens when thread's yield method is called?
*Thread returns to the ready state.

28)	Consider the following code
class Test {
public static void main(String[] args) {
Integer i1 = null; Integer i2 = 0;
int n1 = i1; int n2 = i2;
System.out.println(n1 == n2);
} }
What is the result?
*a runtime error

29)	В каких Java-пакетах находятся основные классы для реализации потоков ввода-вывода?
*java.nio
*java.io

30)	Какой шаблон проектирования необходимо знать, чтобы по максимум использовать в Java библиотеку реализаций потоков ввода-вывода:
*структурный шаблон – декоратор (decorator)

31)	What will be the result from compiling and running
the following code?
import java.io.*;
public class Test {
public static void main(String[] args) {
Writer write = null;
try {
write = new BufferedWriter(new FileWriter("test.txt"));
write.write("This is the final test");
} catch(IOException e) {
e.printStackTrace();
}finally{
write.close();
} } }
*throw a runtime exception

32)	What is Serialization?
*Serialization is the process of writing the state of an object to a byte stream.

33)	What is the result from compiling and running the following code (consider that file text.txt already exists
with some strings)?
import java.io.*;
public class Test {
public static void main(String[] args) {
BufferedReader buf = null;
try {
try {
buf = new BufferedReader("text.txt");
String s = null;
while((s = buf.readLine())!=null){
System.out.println(s);
}
} finally { buf.close(); }
} catch (IOException e) {
e.printStackTrace();
} } }
*the code does not compile

34)	С помощью каких реализаций соответствующих байтовых потоков (классов-обвёрток) можно осуществить удобное чтение и запись данных любого примитивного типа, а не только значений, которые вмещаются в 8 бит (0…255)?
*BufferedOutputStream / BufferedInputStream
*DataOutputStream / DataInputStream

35)	What will the following code do?
import java.io.*;
public class Test {
public static void main(String[] args) {
OutputStream stream = null;
try {
try {
stream = new BufferedOutputStream(
new FileOutputStream("text.txt"));
for (int i = 200; i < 1000;) {
stream.write(i++);
}
} finally {
stream.close();
}
}catch (IOException e){
e.printStackTrace();
} } }
*the code writes numbers from 200 to 999

36)	What invokes a thread's run method?
*start() method of the thread class.

37)	Какой необходимо классу реализовать интерфейс, чтобы объект данного класса обладал поведением автоматического освобождения занятыхим ресурсов с использованием специальной конструкции try-with-resources, которая появилась в JDK 7.0?
*AutoCloseable

38)	What will be happened when we try to compile and run the following code (consider that file xxx.bin already exists with some strings)?
import java.io.*;
public class Test {
public static void main(String[] args) {
try {
FileInputStream fis =
new FileInputStream("xxx.bin");
InputStreamReader isr =
new InputStreamReader(fis);
BufferedReader br = new BufferedReader(isr);
try {
do {
String s = br.readLine();
System.out.println(s);
} while (s != null);
} finally { br.close(); }
} catch (IOException e) { e.printStackTrace(); }
} }
*a compiler error

39)	Что из нижеперечисленного верно относительно перечисляемого типа в Java):
*Перечисление представляет собой список именованных констант.
*Перечисления создаются (объявляются) с помощью ключевого слова enum и неявно является разновидностью классов в Java.
*Невозможно создать напрямую объект перечисления с использованием оператора new.
*Все объекты перечисляемого типа создаются сразу же, как только происходит загрузка соответствующего типа в память.
*Невозможно создать объекты перечисления содинаковым содержимым.

40)	Consider the following code:
enum WordPart{
NORTH, SOUTH, WEST, EAST;
public String toString() {
return name().charAt(0)+ "";
} }
public class Test {
public static void main(String[] args) {
String s = "WEST";
System.out.println(WordPart.valueOf(s));
} }
What is the result of compiling and running this code?
*W

41)	What is a transient variable?
*A transient variable is a variable that may not be serialized during Serialization.

42)	What will the following code print?
enum RGB {
RED("red"), GREEN("green"), BLUE("blue");
String color;
private RGB(String color) {
this.color = color;
} }
public class Test {
public static void main(String[] args) {
RGB rgb = new RGB("red");
System.out.println(rgb);
} }
*the code does not compile

43)	What is Deserialization?
*Deserialization is the process of restoring state of an object from a byte stream.

44)	What will the following code print?
public class Test {
public static void main(String[] args) {
byte bt = -100;
switch(bt) {
case 1: System.out.print("1 ");
case 10: System.out.print("10 ");
default: System.out.print("0 ");
case 100: System.out.print("100 ");
case 1000: System.out.print("1000 ");
} } }
*a compiler error

45)	Из каких компонентов состоит библиотекаApache log4j?
log4j core and log4j api

46)	Выберите неправильные утверждения относительно перечисляемого типа в Java:
*Перечисление неявно наследуется от класса Object и больше не может иметь никаких родителей.
*Перечисление может иметь несколько родителей (для них размешено множественное наследование классов).
*Можно создать классы, которые наследуются (расширяются) от перечисляемого типа.
*Перечисление не может реализовывать ни одного интерфейса.
*Перечисление может реализовывать любой интерфейс и только один.

47)	What is the result from compiling and running the following code?
enum TrafficLights {
RED, YELLOW, GREEN;
private TrafficLights() {
System.out.println("light "); } }
public class Test {
public static void main(String[] args) {
TrafficLights green = TrafficLights.GREEN;
TrafficLights red = TrafficLights.RED;
} }
*light light light

48)	Which method must be implemented by all threads?
*run

49)	Choose all combinations of types and expressions
cases allowed to switch-statement in JDK 7.0:
*type of switch-expression –> String, type of caselabel -> String
*type of switch-expression –>Character, type of case-label -> char
*type of switch-expression –> enum type, type of case-label -> the same enum-type

50)	What is the result from compiling and running the following code?
enum Season { SPRING, SUMMER, AUTUMN, WINTER }
public class Test {
public static void main(String[] args) {
switch(Season.values()[1]){
case AUTUMN:
System.out.println("It's autumn!"); break;
case SPRING:
System.out.println("It's spring!"); break;
case SUMMER:
System.out.println("It's summer!"); break;
case WINTER:
System.out.println("It's winter!"); break;
default:
System.out.println("What season do you mean?");
} } }
*It’s summer!

51)	Consider the following code:
public class Test {
public static void main(String[] args) {
int i = 1, j = 11;
do {
if (i++ > j--) continue;
} while(i < 6);
System.out.printf("i = %d j = %d", i, j);
} }
What will be the result of print?
*i = 6 j = 6

52)	Что можно утверждать относительно конструкторов перечисляемого типа (Enum) в Java:
*Конструктор по умолчанию в Enum всегда создаётся неявно.
*G. Конструктор вызывается неявно (автоматически) для создания объектов Enum и инициализации его константных переменных.

53)	Consider the following code:
import java.util.*;
class Student implements Comparable<Student> {
private int mark;
public Student(int mark) {
this.mark = mark; }
public int compareTo(Student o) {
return Integer.compare(mark, o.mark); }
public String toString() {
return mark + ""; } }
public class Test {
public static void main(String[] args) {
Set<Student> set = new TreeSet<>();
set.add(new Student(7));
set.add(new Student(10));
set.add(new Student(10));
set.add(new Student(9));
set.add(new Student(8));
System.out.println(set); } }
What is the result?
*[7, 8, 9, 10]

54)	Consider the following code:
import java.util.*;
public class Test {
public static void main(String[] args) {
List<Double> list = new ArrayList<Double>();
list.add(5.0); list.add(4.0);
list.add(3.0); list.add(2.0);
list.add(1.0); list.add(.0);
System.out.printf("Size: %d", list.size()); } }
What is the result of compiling and running this code?
*the output: Size: 6

55)	How the method is called which retrieves the number of elements from any collection from JCF?
*size()

56)	What is the result from compiling and running the following code?
import java.util.*;
class Student {
private int mark;
public Student(int mark) { this.mark = mark; }
public int hashCode() { return 10; }
}
public class Test {
public static void main(String[] args) {
Set<Student> set = new HashSet<Student>();
set.add(new Student(7));
set.add(new Student(9));
set.add(new Student(10));
System.out.println(set.size());
} }
*3

57)	What happens when thread's sleep() method is called?
*Thread returns to the waiting state.

58)	Element taking is faster in LinkedList than ArrayList.
(True or False?)
*False

59)	What is currentThread?
*It is a Thread public static method used to obtain a reference to the current thread.

60)	What is the result from running the following code?
import java.util.*;
public class Test {
public static void main(String[] args) {
List<Integer> list = new LinkedList<Integer>();
list.add(9); list.add(9); list.add(9);
for (Integer item : list) {
list.add(10);
System.out.print(item + " ");
} } }
*throw a runtime exception

61)	What is Synchronization?
*Synchronization is the capability to control the access of multiple threads to shared resources.

62)	Does garbage collection guarantee that a program will not run out of memory? (Yes or No?)
*No.

63)	What is a marker interface?
*Marker interface is an interface with no method.

64)	When a char value is added to a short value, what is the type of the result?
*Integer

65)	What is the result from compiling and running the following code?
import java.util.*;
class Man {
private int power;
public Man(int power) { this.power = power; }
}
public class Test {
public static void main(String[] args) {
Set<Man> tree = new TreeSet<Man>();
Man man1 = new Man(50);
Man man2 = new Man(75);
Man man3 = new Man(25);
Man man4 = new Man(100);
tree.add(man4);
tree.add(man3);
tree.add(man2);
tree.add(man1);
System.out.println(tree.size()); } }
*throw a runtime exception

66)	Consider the following code:
import java.util.*;
class Student {
private int mark;
public Student(int mark) { this.mark = mark; }
public boolean equals(Object obj) {
System.out.print(mark + "");
return true;
} }
public class Test {
public static void main(String[] args) {
Set<Student> set = new HashSet<Student>();
set.add(new Student(10));
set.add(new Student(7));
set.add(new Student(9));
System.out.println(set.size());
} }
What is the result?
*3

67)	What is the result from compiling and running the following code?
import java.util.*;
public class Test {
public static void main(String[] args) {
Set<String> set = new TreeSet<String>();
set.add("1"); set.add("2"); set.add("3");
set.add("a"); set.add("b"); set.add("c");
set.add('\u0001'+"");
set.add("\u0002");
set.add("\u0003");
System.out.println(set); } }
*[☺, ☻, ♥, 1, 2, 3, a, b, c]

68)	Что декларирует методология TDD?
Сначало тесты. Тесты должны быть провалены. Потом пишется програмный код до тех пор пока не пройдёт все тесты.

69)	Опишите иерархию поведения библиотеки JCF и
основные её имплементации:
Отдельно Map >> SortedMap >> NavigableMap
далее основной интерфейс Iterable
от него интерфейс Collection.
От интерфейса collection основные имплементации List, Queue, Set
